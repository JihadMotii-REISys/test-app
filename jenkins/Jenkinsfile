#!groovy
// This script works with native Jenkins pipeline
// Jenkins declarative Pipeline as it is the future: https://stackoverflow.com/questions/44657896/jenkins-pipeline-jenkinsfile-node-and-pipeline-directives
// library identifier: "pipeline-library@master",
//         retriever: modernSCM(
//                 [
//                         $class: "GitSCMSource",
//                         //remote: "https://github.com/redhat-cop/pipeline-library.git"
//                         remote: "https://github.com/REI-Systems/pipeline-library.git"
//                 ]
//         )

pipeline { 
    agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    some-label: some-label-value
spec:
  containers:
  - name: maven
    image: maven:alpine
    command:
    - cat
    tty: true
  - name: docker
    image: docker:latest
    command:
    - cat
    tty: true
"""
    }
  }
    
    options {
        // set a timeout of 20 minutes for this pipeline
        timeout(time: 40, unit: 'MINUTES')
    }
    stages {
        stage('Build') { 
            steps { 
                container('maven') {
                    sh 'mvn -B -DskipTests clean package'
                }
            }
        }
        stage('Tests') {
            steps {
                container('maven') {
                    // Report back to github: Status Check PENDING
                    //notifyGithubStatusCheck('PENDING', 'Continuous integration: Run unit test!')

                    sh "mvn test"
                    //step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
                }
            } 
        }
        stage('Sonar') {
            steps {
                container('maven') {
                    sh 'mvn sonar:sonar jacoco:report -Dsonar.login=admin -Dsonar.password=admin -Dsonar.host.url=http://sonarqube-sonarqube:9000 -DskipTests=true'
                    // timeout(time: 5, unit: 'MINUTES') { // Just in case something goes wrong, pipeline will be killed after a timeout
                    //     def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
                    //     echo "Pipeline quality gate status: ${qg.status}"
                    //     if (qg.status == 'ERROR') {
                    //         echo "Pipeline aborted due to quality gate failure: ${qg.status}"
                    //         // TODO: swap the comment out the 2 lines below to mark the build as failed when quality gate failed
                    //         //error "Pipeline aborted due to quality gate failure: ${qg.status}"
                    //         input message: 'SQ Quality Gate Failed, continue?'
                    //     }
                    // }
                }
            }
        }
        stage('Build Image') {
            steps {
                container('docker') {
                    script {
                        docker.withRegistry('', 'dockerhub') {
                            def customImage = docker.build("diegoruizrei/infra-test:0.0.${env.BUILD_ID}")
                            customImage.push()
                        }
                    }
                }
            }
        }
    }
}