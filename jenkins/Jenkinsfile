#!groovy
// This script works with native Jenkins pipeline
// Jenkins declarative Pipeline as it is the future: https://stackoverflow.com/questions/44657896/jenkins-pipeline-jenkinsfile-node-and-pipeline-directives
library identifier: "pipeline-library@master",
        retriever: modernSCM(
                [
                        $class: "GitSCMSource",
                        //remote: "https://github.com/redhat-cop/pipeline-library.git"
                        remote: "https://github.com/REI-Systems/pipeline-library.git"
                ]
        )

pipeline { 
    agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    some-label: maven-build
spec:
  containers:
  # used to run maven processes
  - name: maven
    image: maven:alpine
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /root/.m2
      name: maven-slave-pvc2
      readOnly: false
  # used to run docker processes
  - name: docker
    image: diegoruizrei/rei-docker:latest
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /var/run/docker.sock
      name: docker-sock
  # used to run argocd/git processes
  - name: tools
    image: argoproj/argo-cd-ci-builder:latest
    command:
    - cat
    tty: true
  # security scans
  - name: trivy
    image: aquasec/trivy:latest
    command:
    - cat
    tty: true
  volumes:
  # use host docker
  - name: docker-sock
    hostPath: 
      path: /var/run/docker.sock
  # cache maven dependencies onto pvc between builds
  - name: maven-slave-pvc2
    hostPath:
      path: /root/.m2
  imagePullSecrets:
  - nexuscred
"""
    }
  }
    
    options {
        // set a timeout of 20 minutes for this pipeline
        timeout(time: 40, unit: 'MINUTES')
    }
    stages {
        stage('Build') { 
            steps { 
                container('maven') {
                    sh 'mvn -B -DskipTests clean package'
                }
            }
        }
        stage('Tests') {
            steps {
                container('maven') {
                    // Report back to github: Status Check PENDING
                    //notifyGithubStatusCheck('PENDING', 'Continuous integration: Run unit test!')

                    sh "mvn test"
                    step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
                }
            } 
        }
        stage('Sonar') {
            steps {
                container('maven') {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "sonar", passwordVariable: 'pass', usernameVariable: 'user']]) {
                        sh 'mvn sonar:sonar jacoco:report -Dsonar.login=${user} -Dsonar.password=${pass} -Dsonar.host.url=http://sonarqube-sonarqube:9000 -DskipTests=true'
                    }
                    // timeout(time: 5, unit: 'MINUTES') { // Just in case something goes wrong, pipeline will be killed after a timeout
                    //     def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
                    //     echo "Pipeline quality gate status: ${qg.status}"
                    //     if (qg.status == 'ERROR') {
                    //         echo "Pipeline aborted due to quality gate failure: ${qg.status}"
                    //         // TODO: swap the comment out the 2 lines below to mark the build as failed when quality gate failed
                    //         //error "Pipeline aborted due to quality gate failure: ${qg.status}"
                    //         input message: 'SQ Quality Gate Failed, continue?'
                    //     }
                    // }
                }
            }
        }
        stage('Build Image and push') {
            steps {
                container('docker') {
                    script {
                        //docker.withRegistry('http://sonatype-nexus-service:8082', 'nexus') {
                            sh """
                            docker login -u admin -p admin123 sonatype-nexus-service:8082
                            """
                            def customImage = docker.build("sonatype-nexus-service:8082/infra-test:${env.GIT_COMMIT}", "--network=host .")
                            customImage.push()
                        //}
                    }
                }
            }
        }
        stage('Trivy scan'){
            steps{
                container('trivy'){
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "nexus", passwordVariable: 'pass', usernameVariable: 'user']]) {
                        sh "export TRIVY_AUTH_URL=sonatype-nexus-service:8082"
                        sh "export TRIVY_USERNAME=${user}"
                        sh "export TRIVY_PASSWORD=${pass}"
                        sh "export TRIVY_NON_SSL=true"
                        sh "trivy image sonatype-nexus-service:8082/infra-test:${env.GIT_COMMIT}"
                    }
                }
            }
        }
        stage('Deploy develop') {
            environment {
                GIT_CREDS = credentials('git')
            }
            steps {
                container('tools') {
                    sh "git clone https://$GIT_CREDS_USR:$GIT_CREDS_PSW@github.com/diego-ruiz-rei/test-app-deploy.git"
                    sh "git config --global user.email 'ci@ci.com'"

                    dir("test-app-deploy") {
                        sh "cd ./base && kustomize edit set image sonatype-nexus-service:8082/infra-test:${env.GIT_COMMIT}"
                        sh "git commit -am 'Publish new version' && git push || echo 'no changes'"
                    }
                }
            }
        }
    }
}